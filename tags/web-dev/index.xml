<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web-dev on Nice Polar Blog</title><link>https://1hiking.github.io/tags/web-dev/</link><description>Recent content in Web-dev on Nice Polar Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://1hiking.github.io/tags/web-dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Playing with the CSS Paint API</title><link>https://1hiking.github.io/posts/2022/02/playing-with-the-css-paint-api/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://1hiking.github.io/posts/2022/02/playing-with-the-css-paint-api/</guid><description>Some weeks ago while studying about CSS, I stumbled upon https://houdini.how and it seems as a fun feature to experiment and integrate in your projects in the future.
What is it? ðŸ”— The same way HTML has the DOM, CSS has the CSS Object Model (CSSOM) and the CSS Houdini group are developing APIs that are meant to allow developers to make use of it in the form of Worklets, these can be reusable and shared between projects.</description></item><item><title>A quick change to featured posts in Hugo</title><link>https://1hiking.github.io/posts/2022/01/a-quick-change-to-featured-posts-in-hugo/</link><pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate><guid>https://1hiking.github.io/posts/2022/01/a-quick-change-to-featured-posts-in-hugo/</guid><description>I have been recently looking about how to add latests posts in my index page, since it has a giant space that has no purpose. I quickly glanced at this article by Damien in which he shared this snippet of code:
{{ range first 3 ( where .Site.Pages &amp;#34;Type&amp;#34; &amp;#34;in&amp;#34; site.Params.mainSections )}} ... {{ end }} However, it should add .Site.RegularPages instead of .Site.Pages because as the Hugo documentation states, .</description></item><item><title>A nice table of contents</title><link>https://1hiking.github.io/posts/2022/01/a-nice-table-of-contents/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><guid>https://1hiking.github.io/posts/2022/01/a-nice-table-of-contents/</guid><description>Until now, I have used the following snippet to make a table of contents.
&amp;lt;div class=&amp;#34;toc&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Table of Contents&amp;lt;/p&amp;gt; {{- .Page.TableOfContents }} &amp;lt;/div&amp;gt; However, when you have a lot of sections it becomes a bit annoying for the visitor to scroll to read.
An easy solution would be to use JS to detect a click and expand the table, or using CSS :hover events but in each case you will add unnecessary complexity as the project grows.</description></item><item><title>Making a browser from Scratch!</title><link>https://1hiking.github.io/posts/2021/04/making-a-browser-from-scratch/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://1hiking.github.io/posts/2021/04/making-a-browser-from-scratch/</guid><description>Table of Contents Introduction Requirements Conclusions Inspired by Introduction ðŸ”— So let&amp;rsquo;s talk about developing a browser, one of the most complex programs in your computer!
As most people know, since the 90&amp;rsquo;s web browsers have been an essential program in anyone&amp;rsquo;s computer, they allow you to connect with your friends online, play videogames, read scientific papers, or even niche functions to connect to FTP&amp;hellip;! oh actually nevermind.</description></item></channel></rss>